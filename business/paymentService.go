package business

import (
	"fmt"
	"payment-hub-mock/model"
)

//PaymentServiceImpl is the implementation of the busines,s logic
type PaymentServiceImpl struct {
	Repository Repository
}

//PaymentService is the interface that contains our business logic
type PaymentService interface {
	Authorize(Payments) (Transaction, error)
	Capture(uint64) (Transaction, error)
	Cancel(uint64) (Transaction, error)
	Search(uint64) (Transaction, error)
}

//Authorize is the implementation of the business logic that authorizes the payment
func (ps PaymentServiceImpl) Authorize(payments Payments) (Transaction, error) {
	_, err := ps.Repository.Save(payments)
	if err != nil {
		return Transaction{}, err
	}

	return Transaction{
		PaymentID: "1",
	}, nil
}

//Capture is the implementation of the business logic that captures the payment
func (ps PaymentServiceImpl) Capture(paymentID uint64) (Transaction, error) {
	resp, err := ps.Repository.FindOne(paymentID)
	if err != nil {
		return Transaction{}, err
	}

	fmt.Println("aquii", resp)
	transModel := resp.(model.TransactionModel)

	return Transaction{
		PaymentID: transModel.PaymentID,
		Amount:    transModel.Amount,
		Status:    transModel.Status,
	}, nil
}

//Cancel is the implementation of the business logic that cancels the payment
func (ps PaymentServiceImpl) Cancel(paymentID uint64) (Transaction, error) {
	return Transaction{
		PaymentID: "1",
	}, nil
}

//Search returns the transaction generated by payment
func (ps PaymentServiceImpl) Search(paymentID uint64) (Transaction, error) {
	return Transaction{
		PaymentID: "1",
	}, nil
}
